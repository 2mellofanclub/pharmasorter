Liferay.Loader.define("frontend-js-react-web@4.0.22/js/hooks/useStateSafe.es", ['module', 'exports', 'require', 'frontend-js-react-web', 'frontend-js-react-web$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = useStateSafe;

    var _frontendJsReactWeb = require("frontend-js-react-web");

    var _react = _interopRequireDefault(require("frontend-js-react-web$react"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }

    function _iterableToArrayLimit(arr, i) {
      if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
        return;
      }var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    var useCallback = _react.default.useCallback,
        useState = _react.default.useState;
    /**
     * Wrapper for `useState` that does an `isMounted()` check behind the scenes
     * before triggering side-effects.
     */

    function useStateSafe(initialValue) {
      var isMounted = (0, _frontendJsReactWeb.useIsMounted)();

      var _useState = useState(initialValue),
          _useState2 = _slicedToArray(_useState, 2),
          state = _useState2[0],
          setState = _useState2[1];

      var setStateSafe = useCallback(function (newValue) {
        if (isMounted()) {
          setState(newValue);
        }
      }, [isMounted]);
      return [state, setStateSafe];
    }
    //# sourceMappingURL=useStateSafe.es.js.map
  }
});
//# sourceMappingURL=useStateSafe.es.js.map