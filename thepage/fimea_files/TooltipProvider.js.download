"use strict";

Liferay.Loader.define("@frontend-taglib-clay$clayui/tooltip@3.4.0/lib/TooltipProvider", ['module', 'exports', 'require', '@frontend-taglib-clay$clayui/shared', 'frontend-taglib-clay$dom-align', 'frontend-js-react-web$react', 'frontend-taglib-clay$warning', './Tooltip'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }return _typeof(obj);
    }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _shared = require("@frontend-taglib-clay$clayui/shared");

    var _domAlign = _interopRequireDefault(require("frontend-taglib-clay$dom-align"));

    var _react = _interopRequireWildcard(require("frontend-js-react-web$react"));

    var _warning = _interopRequireDefault(require("frontend-taglib-clay$warning"));

    var _Tooltip = _interopRequireDefault(require("./Tooltip"));

    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {
        return cache;
      };return cache;
    }

    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {
        return cache.get(obj);
      }var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }newObj.default = obj;if (cache) {
        cache.set(obj, newObj);
      }return newObj;
    }

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });keys.push.apply(keys, symbols);
      }return keys;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }return target;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }return obj;
    }

    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];
        }
      }return target;
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];
      }return target;
    }

    var ALIGNMENTS = ['top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left'];
    var ALIGNMENTS_MAP = {
      bottom: ['tc', 'bc'],
      'bottom-left': ['tl', 'bl'],
      'bottom-right': ['tr', 'br'],
      left: ['cr', 'cl'],
      right: ['cl', 'cr'],
      top: ['bc', 'tc'],
      'top-left': ['bl', 'tl'],
      'top-right': ['br', 'tr']
    };
    var ALIGNMENTS_INVERSE_MAP = {
      bctc: 'top',
      bltl: 'top-left',
      brtr: 'top-right',
      clcr: 'right',
      crcl: 'left',
      tcbc: 'bottom',
      tlbl: 'bottom-left',
      trbr: 'bottom-right'
    };
    var initialState = {
      align: 'top',
      message: '',
      show: false
    };

    var reducer = function reducer(state, _ref) {
      var type = _ref.type,
          payload = _objectWithoutProperties(_ref, ["type"]);

      switch (type) {
        case 'align':
          return _objectSpread(_objectSpread({}, state), payload);

        case 'show':
          return _objectSpread(_objectSpread(_objectSpread({}, state), payload), {}, {
            show: true
          });

        case 'hide':
          return _objectSpread(_objectSpread({}, state), {}, {
            align: initialState.align,
            show: false
          });

        default:
          throw new TypeError();
      }
    };

    function matches(element, selectorString) {
      if (element.matches) {
        return element.matches(selectorString);
      } else if (element.msMatchesSelector) {
        return element.msMatchesSelector(selectorString);
      } else if (element.webkitMatchesSelector) {
        return element.webkitMatchesSelector(selectorString);
      } else {
        return false;
      }
    }

    function closestAncestor(node, s) {
      var ancestor = node;

      if (!document.documentElement.contains(node)) {
        return null;
      }

      do {
        if (matches(ancestor, s)) {
          return ancestor;
        }

        ancestor = ancestor.parentElement;
      } while (ancestor !== null);

      return null;
    }

    var TooltipProvider = function TooltipProvider(_ref2) {
      var _ref2$autoAlign = _ref2.autoAlign,
          autoAlign = _ref2$autoAlign === void 0 ? true : _ref2$autoAlign,
          children = _ref2.children,
          _ref2$contentRenderer = _ref2.contentRenderer,
          contentRenderer = _ref2$contentRenderer === void 0 ? function (props) {
        return props.title;
      } : _ref2$contentRenderer,
          _ref2$delay = _ref2.delay,
          delay = _ref2$delay === void 0 ? 600 : _ref2$delay;

      var _React$useReducer = _react.default.useReducer(reducer, initialState),
          _React$useReducer2 = _slicedToArray(_React$useReducer, 2),
          _React$useReducer2$ = _React$useReducer2[0],
          align = _React$useReducer2$.align,
          _React$useReducer2$$m = _React$useReducer2$.message,
          message = _React$useReducer2$$m === void 0 ? '' : _React$useReducer2$$m,
          show = _React$useReducer2$.show,
          dispatch = _React$useReducer2[1]; // Using `any` type since TS incorrectly infers setTimeout to be from NodeJS


      var timeoutIdRef = _react.default.useRef();

      var targetRef = _react.default.useRef(null);

      var titleNodeRef = _react.default.useRef(null);

      var tooltipRef = _react.default.useRef(null);

      var handleHide = (0, _react.useCallback)(function (_ref3) {
        var target = _ref3.target;

        if (!titleNodeRef.current) {
          return;
        }

        var dataTitle = titleNodeRef.current.getAttribute('data-title');

        if (dataTitle) {
          document.removeEventListener('keyup', handleEsc, true);
          target.removeEventListener('click', handleHide);
          titleNodeRef.current.setAttribute('title', dataTitle);
          titleNodeRef.current.removeAttribute('data-title');
          titleNodeRef.current = null;
          targetRef.current = null;
          dispatch({
            type: 'hide'
          });
          clearTimeout(timeoutIdRef.current);
        }
      }, []);
      var handleEsc = (0, _react.useCallback)(function (event) {
        if (event.key === _shared.Keys.Esc) {
          event.stopImmediatePropagation();
          handleHide(event);
        }
      }, []);
      var handleShow = (0, _react.useCallback)(function (_ref4) {
        var target = _ref4.target;
        var hasTitle = target && target.hasAttribute('title');
        var titleNode = hasTitle ? target : closestAncestor(target, '[title]');
        var title = titleNode && titleNode.getAttribute('title');

        if (title) {
          titleNodeRef.current = titleNode;
          targetRef.current = target;
          document.addEventListener('keyup', handleEsc, true);
          target.addEventListener('click', handleHide);
          titleNode.setAttribute('data-title', title);
          titleNode.removeAttribute('title');
          var customDelay = titleNode.getAttribute('data-tooltip-delay');
          var newAlign = titleNode.getAttribute('data-tooltip-align');
          timeoutIdRef.current = setTimeout(function () {
            dispatch({
              align: newAlign || align,
              message: title,
              type: 'show'
            });
          }, customDelay ? Number(customDelay) : delay);
        }
      }, []);

      _react.default.useEffect(function () {
        if (titleNodeRef.current && tooltipRef.current) {
          var points = ALIGNMENTS_MAP[align || 'top'];
          var newAlignmentString = (0, _domAlign.default)(tooltipRef.current, titleNodeRef.current, {
            overflow: {
              adjustX: autoAlign,
              adjustY: autoAlign
            },
            points: points
          }).points.join('');
          var pointsString = points.join('');

          if (pointsString !== newAlignmentString) {
            dispatch({
              align: ALIGNMENTS_INVERSE_MAP[newAlignmentString],
              type: 'align'
            });
          }
        }
      }, [align, show]);

      void 0;
      return (/*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, show && /*#__PURE__*/_react.default.createElement(_shared.ClayPortal, null, /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
          alignPosition: align,
          ref: tooltipRef,
          show: true
        }, contentRenderer({
          targetNode: targetRef.current,
          title: message
        }))), /*#__PURE__*/_react.default.cloneElement(children, _objectSpread(_objectSpread({}, children.props), {}, {
          onMouseOut: handleHide,
          onMouseOver: handleShow
        })))
      );
    };

    var _default = TooltipProvider;
    exports.default = _default;
  }
});
//# sourceMappingURL=TooltipProvider.js.map